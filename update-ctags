#!/usr/bin/python

import argparse, os, json, sys
from subprocess import call

PERSISTED_FILE=os.path.join(os.path.expanduser('~'),'.my-ctags-conf')

EDS_INCLUDE_DIR = '/usr/include/eds/'

def update_ctags():
    settings = load_settings()
    dirs = settings['dirs']
    bad_dirs = []
    for d in dirs:
        if os.path.isdir(d):
            tagfile = os.path.join(d, 'tags')
            args = ['ctags', 
                    '-R', 
                    '--langmap=c++:+.cu:+.tpp', 
                    '-o', tagfile,  
                    d,
                    EDS_INCLUDE_DIR]
            #print 'args ', ' '.join(args)
            call(args)
            sys.stdout.write("Updating ctags for %s\n" % d)
        else:
            sys.stderr.write("Directory does not exist: %s. Removing from list\n" % d)
            bad_dirs.append(d)

    settings['dirs'] = [ x for x in dirs if x not in bad_dirs]
    write_settings(settings)


def write_settings(settings):
    f = open(PERSISTED_FILE, 'w')
    json.dump(settings, f)
    return settings

def load_settings():
    settings = {'dirs': []}
    print 'reading from ', PERSISTED_FILE
    if not os.path.isfile:
        f = open(PERSISTED_FILE, 'w')
    else:
        f = open(PERSISTED_FILE)
        try:
            loaded_settings = json.load(f)
            settings = loaded_settings
        except ValueError as e:
            print 'no json data found'
    return settings

def add_current_dir():
    settings = load_settings()
    pwd = os.getcwd()
    settings['dirs'].append(pwd)
    settings['dirs'] = list(set(settings['dirs']))
    print settings
    write_settings(settings)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--current", help="add current directory", action="store_true")
    parser.add_argument("-r", "--run", help="run ctags", action="store_true")
    args = parser.parse_args()

    if args.current:
        add_current_dir()
    elif args.run:
        update_ctags()
    else: 
        print 'use --help'


if __name__ == '__main__':
    main()

